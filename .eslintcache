[{"/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/index.js":"1","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/App.js":"2","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/reportWebVitals.js":"3","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/components/SignIn.js":"4","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/components/Lobby.js":"5","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/components/Game.jsx":"6","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/components/Modal.js":"7","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/components/Card.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":1898,"mtime":1616864673217,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":714,"mtime":1611605777000,"results":"13","hashOfConfig":"10"},{"size":1209,"mtime":1611700393000,"results":"14","hashOfConfig":"10"},{"size":5185,"mtime":1613856238227,"results":"15","hashOfConfig":"10"},{"size":1647,"mtime":1613854219757,"results":"16","hashOfConfig":"10"},{"size":2876,"mtime":1613856552399,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"jy01ep",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/index.js",[],["40","41"],"/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/App.js",["42"],"import React, {useState, useEffect, useRef} from 'react'\nimport './App.css';\nimport SignIn from \"./components/SignIn\";\nimport Game from './components/Game';\nimport io from \"socket.io-client/build/index\";\nimport Lobby from \"./components/Lobby\";\n\nconst screenStrings = {\n    lobby: 'lobby',\n    signIn: 'signIn',\n    game: 'game'\n};\n\n\n// const socket = io.connect(`http://localhost:5000` , {\n//     withCredentials: true,\n//     extraHeaders: {\n//         \"my-custom-header\": \"abcd\"\n//     }\n// });\n\nconst socket = io.connect();\n\n\nfunction App() {\n    const [userList, setUserList] = useState([]);\n    const [screen, setScreen] = useState(screenStrings.signIn);\n    const [userName, setUserName] = useState('');\n\n    const options = 24;\n\n    useEffect(() => {\n        socket.on('users', (connectedUsers) => {\n            setUserList(connectedUsers)\n        });\n    },[]);\n\n\n    const join = (name) => {\n        setScreen(screenStrings.lobby);\n        setUserName(name);\n        socket.emit('join', name)\n    };\n\n    const playerIsReady = () => {\n        socket.emit('ready', userName)\n    };\n\n    const goToGame = () => {\n        setScreen(screenStrings.game)\n    };\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"title\">Memory Game {userName}</div>\n            {screen === screenStrings.signIn &&\n            <SignIn join={join} />\n            }\n            {screen === screenStrings.lobby &&\n            <Lobby\n                userList={userList}\n                playerIsReady={playerIsReady}\n                goToGame={goToGame}\n                userName={userName}\n            />\n            }\n            {screen === screenStrings.game &&\n            <Game\n                options={options}\n                socket={socket}\n                userList={userList}\n                setScreen={setScreen}\n            />\n            }\n        </div>\n    );\n}\n\nexport default App;\n","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/reportWebVitals.js",[],"/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/components/SignIn.js",[],"/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/components/Lobby.js",["43","44"],"import React, {useEffect, useState} from 'react'\nimport checkMark from '../assets/checkmark.png'\n\n\n\nfunction Lobby({userList, userName, playerIsReady, everyoneIsReady, goToGame}) {\n\n    useEffect(() => {\n        if(userList.length > 0){\n            const everyoneIsReady = userList.every(e => {\n                return e.ready\n            });\n            if(everyoneIsReady){\n                goToGame()\n            }\n        }\n    },[userList]);\n\n    return (\n        <>\n            <div>\n                {userList.map((e,i) => {\n                    return (\n                        <div className=\"playerNameWrapper\">\n                            <div className=\"playerName\">\n                                {console.log(e[userName])}\n                                <div>{e.name}</div>\n                                <div onClick={playerIsReady}>\n                                    {!!e.ready ? <img src={checkMark} alt=\"checkmark\" height={30} width={30}/>  : <div className=\"ready\">ready?</div>}\n                                </div>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </>\n    );\n}\n\nexport default Lobby;\n","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/components/Game.jsx",["45","46","47"],"import React,{useState, useEffect, useMemo} from 'react'\nimport Card from './Card'\nimport Modal from './Modal'\n\nlet indexes = 1;\n\nfunction Game({options, socket, userList, setScreen}) {\n    const [game, setGame] = useState([]);\n    const [flippedCount, setFlippedCount] = useState(0);\n    const [flippedIndexes, setFlippedIndexes] = useState([]);\n    const [modals, setModals] = useState({nextPlayer: false, match: false, gameOver: false})\n    const [showModal, setShowModal] = useState(false);\n\n\n    const user = useMemo(() => {\n        const turnArr = userList.filter(e => e.turn === true);\n        if(turnArr.length > 0){\n            return turnArr[0]\n        }\n    },[userList]);\n\n    const newGame = () => {\n        setScreen('signIn');\n        socket.emit('startNewGame');\n    };\n\n    useEffect(() => {\n        socket.emit('newGame', options);\n        socket.on('newGame', (shuffledGame) => {\n            setGame(shuffledGame)\n        });\n        setShowModal(true);\n        setModals({nextPlayer: true, match: false, gameOver: false})\n    }, []);\n\n    const checkIfThereIsAWinner = () => {\n        let points = [];\n        for( let i = 0; i < userList.length; i++){\n            points.push(userList[i].points)\n        }\n        const totalPoints = points.reduce((a, b) => a + b, 0);\n        return totalPoints === options;\n    };\n\n    const checkIfTheresAMatch = () => {\n        return game[flippedIndexes[0]].pictureId === game[flippedIndexes[1]].pictureId;\n    };\n\n    const getNextPlayer = () => {\n        let indexOfUser = indexes++;\n        if(indexOfUser >= userList.length - 1){\n            indexes = 0\n        }\n        socket.emit('nextPlayer', indexOfUser);\n    };\n\n\n    useEffect(() => {\n        if(flippedCount === 2 && userList.length > 1){\n            if(checkIfThereIsAWinner()){\n                setModals({nextPlayer: false, match: false, gameOver: true})\n            } else if (checkIfTheresAMatch()){\n                setModals({nextPlayer: false, match: true, gameOver: false})\n            } else {\n                getNextPlayer();\n                setModals({nextPlayer: true, match: false, gameOver: false})\n            }\n            setShowModal(true)\n        }\n\n    },[flippedCount]);\n\n\n\n    if (flippedIndexes.length === 2) {\n        const match = game[flippedIndexes[0]].pictureId === game[flippedIndexes[1]].pictureId;\n\n        if (match) {\n            const newGame = [...game];\n            newGame[flippedIndexes[0]].flipped = true;\n            newGame[flippedIndexes[1]].flipped = true;\n            newGame[flippedIndexes[0]].user = user;\n            newGame[flippedIndexes[1]].user = user;\n            setGame(newGame);\n            const newIndexes = [...flippedIndexes];\n            newIndexes.push(false);\n            setFlippedIndexes(newIndexes);\n        } else {\n            const newIndexes = [...flippedIndexes];\n            newIndexes.push(true);\n            setFlippedIndexes(newIndexes)\n        }\n    }\n\n    useEffect(() => {\n        let users = [];\n        for(let i = 0; i < game.length; i++){\n            if(game[i].user?.name){\n                users.push(game[i].user.name)\n            }\n        }\n        const pointsArr = users.reduce(function (acc, curr) {\n            if (typeof acc[curr] == 'undefined') {\n                acc[curr] = 1;\n            } else {\n                acc[curr] += 1\n            }\n            return acc;\n        }, {});\n\n        socket.emit('addPoints', pointsArr);\n\n    },[game]);\n\n    if (game.length === 0) return <div>loading...</div>;\n    else {\n        return (\n            <div>\n                {userList.length > 1 &&\n                    <div className=\"usersWrapper\">\n                        {userList.map(user => {\n                            return (\n                                <div\n                                    className={user.turn ? 'userTurn user' : 'user'}\n                                    style={{borderLeft: `10px solid ${user.color}`}}\n                                >\n                                    {user.name}: {user.points}\n                                </div>\n                            )\n                        })}\n                    </div>\n                }\n                <div id=\"cards\">\n                    {game.map((card, index) => (\n                        <div className=\"card\" key={index}>\n                            <Card\n                                id={index}\n                                picture={card.picture}\n                                user={card.user}\n                                game={game}\n                                flippedCount={flippedCount}\n                                setFlippedCount={setFlippedCount}\n                                flippedIndexes={flippedIndexes}\n                                setFlippedIndexes={setFlippedIndexes}\n                                socket={socket}\n                            />\n                        </div>\n                    ))}\n                </div>\n                {showModal &&\n                <Modal user={user} closeModal={() => setShowModal(false)} modals={modals} newGame={newGame}/>\n                    }\n            </div>\n        )\n}\n}\n\nexport default Game;\n","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/components/Modal.js",["48","49"],"import React, {useEffect, useMemo} from 'react'\n\n\n\nfunction Modal({closeModal, user, modals, newGame}) {\n\n    useEffect(() => {\n        setTimeout(() => {\n            closeModal(false)\n        }, 3000)\n    }, []);\n\n\n\n    const renderText = () => {\n        if(modals.nextPlayer){\n            return (\n                <div className=\"modalWrapper\">\n                    <div className='modalText'>It's</div>\n                    <div style={{color: user.color, fontSize: '40px'}}>{user.name}</div>\n                    <div className='modalText'>Turn</div>\n                </div>\n            )\n        } else if (modals.match){\n            return (\n                <div>\n                    <div className='modalText'>It's</div>\n                    <div className='modalText'>a</div>\n                    <div className='modalText'>Match</div>\n                    <div className='modalText' style={{paddingTop: '20px'}}>Go Again</div>\n                </div>\n            )\n        }  else if (modals.gameOver){\n            return (\n                <div>\n                    <div className='gameOver'>Game Over</div>\n                    <div onClick={newGame}>Play Again?</div>\n                </div>\n            )\n        }\n    };\n\n    return (\n        <div className=\"modalOverlay\">\n            <div className=\"modal\">\n                <div style={\n                    {\n                        backgroundColor: `${user.color}`,\n                        height: '20px',\n                        marginBottom: '10px'\n                    }\n                }/>\n                {renderText()}\n            </div>\n\n        </div>\n    );\n}\n\nexport default Modal;\n","/Users/lisaherzberg/Code/projects/1.2021/memory-game-sockets/src/components/Card.js",["50","51","52"],"import React,{useState, useEffect} from 'react'\nimport { useSpring, animated as a } from 'react-spring'\n\n\nfunction Card({id, picture, game, user, flippedCount, setFlippedCount, flippedIndexes, setFlippedIndexes, socket}) {\n    const [flipped, setFlippedCard] = useState(false);\n    const [disableCard, setDisableCard] = useState(false)\n    const {transform, opacity} = useSpring({\n        opacity: flipped ? 1 : 0,\n        transform: `perspective(600px) rotateX(${flipped ? 180 : 0}deg)`,\n        config: {mass: 5, tension: 500, friction: 80},\n    });\n\n    useEffect(() => {\n        if (flippedIndexes[2] === true && flippedIndexes.indexOf(id) > -1) {\n            setDisableCard(true)\n            setTimeout(() => {\n                setFlippedCard(state => !state);\n                setFlippedCount(flippedCount + 1);\n                setFlippedIndexes([])\n                setDisableCard(false)\n\n            }, 3000)\n        } else if (flippedIndexes[2] === false && id === 0) {\n            setTimeout(() => {\n                setFlippedCount(flippedCount + 1);\n                setFlippedIndexes([])\n                setDisableCard(false)\n\n            }, 3000)\n        }\n    }, [flippedIndexes]);\n\n\n\n    useEffect(() => {\n\n        socket.on('cardFlipped', (data) => {\n            if(data.id === id){\n                if (!game[id].flipped && flippedCount % 3 === 0) {\n                    setFlippedCard(!flipped);\n                    setFlippedCount(flippedCount + 1);\n                    const newIndexes = [...data.flippedIndexes];\n                    newIndexes.push(id);\n                    setFlippedIndexes(newIndexes)\n                } else if (\n                    flippedCount % 3 === 1 &&\n                    !game[id].flipped &&\n                    flippedIndexes.indexOf(id) < 0\n                ) {\n                    setFlippedCard(state => !state);\n                    setFlippedCount(flippedCount + 1);\n                    const newIndexes = [...data.flippedIndexes];\n                    newIndexes.push(id);\n                    setFlippedIndexes(newIndexes)\n                }\n            }\n\n        })\n\n    }, []);\n\n    const onCardClick = () => {\n            socket.emit('cardFlipped', {id, flippedIndexes});\n    };\n\n\n\n    return (\n        <div onClick={onCardClick}>\n            <a.div\n                className=\"c back\"\n                style={{\n                    opacity: opacity.interpolate(o => 1 - o),\n                    transform,\n                }}\n            />\n            <a.div\n                className=\"c front\"\n                style={{\n                    opacity,\n                    transform: transform.interpolate(t => `${t} rotateX(180deg)`),\n                    backgroundImage: `url(${picture})`,\n                    boxShadow: `0px 1px 4px 5px ${user.color}`\n                }}\n            />\n        </div>\n    )\n}\n\nexport default Card;\n",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":37,"nodeType":"59","messageId":"60","endLine":1,"endColumn":43},{"ruleId":"57","severity":1,"message":"61","line":1,"column":27,"nodeType":"59","messageId":"60","endLine":1,"endColumn":35},{"ruleId":"62","severity":1,"message":"63","line":17,"column":7,"nodeType":"64","endLine":17,"endColumn":17,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":34,"column":8,"nodeType":"64","endLine":34,"endColumn":10,"suggestions":"67"},{"ruleId":"62","severity":1,"message":"68","line":71,"column":7,"nodeType":"64","endLine":71,"endColumn":21,"suggestions":"69"},{"ruleId":"62","severity":1,"message":"70","line":113,"column":7,"nodeType":"64","endLine":113,"endColumn":13,"suggestions":"71"},{"ruleId":"57","severity":1,"message":"72","line":1,"column":27,"nodeType":"59","messageId":"60","endLine":1,"endColumn":34},{"ruleId":"62","severity":1,"message":"73","line":11,"column":8,"nodeType":"64","endLine":11,"endColumn":10,"suggestions":"74"},{"ruleId":"57","severity":1,"message":"75","line":7,"column":12,"nodeType":"59","messageId":"60","endLine":7,"endColumn":23},{"ruleId":"62","severity":1,"message":"76","line":32,"column":8,"nodeType":"64","endLine":32,"endColumn":24,"suggestions":"77"},{"ruleId":"62","severity":1,"message":"78","line":61,"column":8,"nodeType":"64","endLine":61,"endColumn":10,"suggestions":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'goToGame'. Either include it or remove the dependency array. If 'goToGame' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["82"],"React Hook useEffect has missing dependencies: 'options' and 'socket'. Either include them or remove the dependency array.",["83"],"React Hook useEffect has missing dependencies: 'checkIfThereIsAWinner', 'checkIfTheresAMatch', 'getNextPlayer', and 'userList.length'. Either include them or remove the dependency array.",["84"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["85"],"'useMemo' is defined but never used.","React Hook useEffect has a missing dependency: 'closeModal'. Either include it or remove the dependency array. If 'closeModal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["86"],"'disableCard' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'flippedCount', 'id', 'setFlippedCount', and 'setFlippedIndexes'. Either include them or remove the dependency array. If 'setFlippedCount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["87"],"React Hook useEffect has missing dependencies: 'flipped', 'flippedCount', 'flippedIndexes', 'game', 'id', 'setFlippedCount', 'setFlippedIndexes', and 'socket'. Either include them or remove the dependency array. If 'setFlippedCount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [goToGame, userList]",{"range":"103","text":"104"},"Update the dependencies array to be: [options, socket]",{"range":"105","text":"106"},"Update the dependencies array to be: [checkIfThereIsAWinner, checkIfTheresAMatch, flippedCount, getNextPlayer, userList.length]",{"range":"107","text":"108"},"Update the dependencies array to be: [game, socket]",{"range":"109","text":"110"},"Update the dependencies array to be: [closeModal]",{"range":"111","text":"112"},"Update the dependencies array to be: [flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]",{"range":"113","text":"114"},"Update the dependencies array to be: [flipped, flippedCount, flippedIndexes, game, id, setFlippedCount, setFlippedIndexes, socket]",{"range":"115","text":"116"},[432,442],"[goToGame, userList]",[1049,1051],"[options, socket]",[2196,2210],"[checkIfThereIsAWinner, checkIfTheresAMatch, flippedCount, getNextPlayer, userList.length]",[3450,3456],"[game, socket]",[209,211],"[closeModal]",[1173,1189],"[flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]",[2121,2123],"[flipped, flippedCount, flippedIndexes, game, id, setFlippedCount, setFlippedIndexes, socket]"]